{"functions": [{"name": "arrayCopy", "group": "Array", "doc": ["Create a copy of an array"], "args": [{"name": "array", "doc": ["The array to copy"]}], "return": ["The array copy"]}, {"name": "arrayExtend", "group": "Array", "doc": ["Extend one array with another"], "args": [{"name": "array", "doc": ["The array to extend"]}, {"name": "array2", "doc": ["The array to extend with"]}], "return": ["The extended array"]}, {"name": "arrayGet", "group": "Array", "doc": ["Get an array element"], "args": [{"name": "array", "doc": ["The array"]}, {"name": "index", "doc": ["The array element's index"]}], "return": ["The array element"]}, {"name": "arrayIndexOf", "group": "Array", "doc": ["Find the index of a value in an array"], "args": [{"name": "array", "doc": ["The array"]}, {"name": "value", "doc": ["The value to find in the array, or a match function, f(value) -> bool"]}, {"name": "index", "doc": ["Optional (default is 0). The index at which to start the search."]}], "return": ["The first index of the value in the array; -1 if not found."]}, {"name": "arrayJoin", "group": "Array", "doc": ["Join an array with a separator string"], "args": [{"name": "array", "doc": ["The array"]}, {"name": "separator", "doc": ["The separator string"]}], "return": ["The joined string"]}, {"name": "arrayLastIndexOf", "group": "Array", "doc": ["Find the last index of a value in an array"], "args": [{"name": "array", "doc": ["The array"]}, {"name": "value", "doc": ["The value to find in the array, or a match function, f(value) -> bool"]}, {"name": "index", "doc": ["Optional (default is the end of the array). The index at which to start the search."]}], "return": ["The last index of the value in the array; -1 if not found."]}, {"name": "arrayLength", "group": "Array", "doc": ["Get the length of an array"], "args": [{"name": "array", "doc": ["The array"]}], "return": ["The array's length; zero if not an array"]}, {"name": "arrayNew", "group": "Array", "doc": ["Create a new array"], "args": [{"name": "values...", "doc": ["The new array's values"]}], "return": ["The new array"]}, {"name": "arrayNewSize", "group": "Array", "doc": ["Create a new array of a specific size"], "args": [{"name": "size", "doc": ["Optional (default is 0). The new array's size."]}, {"name": "value", "doc": ["Optional (default is 0). The value with which to fill the new array."]}], "return": ["The new array"]}, {"name": "arrayPop", "group": "Array", "doc": ["Remove the last element of the array and return it"], "args": [{"name": "array", "doc": ["The array"]}], "return": ["The last element of the array; null if the array is empty."]}, {"name": "arrayPush", "group": "Array", "doc": ["Add one or more values to the end of the array"], "args": [{"name": "array", "doc": ["The array"]}, {"name": "values...", "doc": ["The values to add to the end of the array"]}], "return": ["The array"]}, {"name": "arraySet", "group": "Array", "doc": ["Set an array element value"], "args": [{"name": "array", "doc": ["The array"]}, {"name": "index", "doc": ["The index of the element to set"]}, {"name": "value", "doc": ["The value to set"]}], "return": ["The value"]}, {"name": "arrayShift", "group": "Array", "doc": ["Remove the first element of the array and return it"], "args": [{"name": "array", "doc": ["The array"]}], "return": ["The first element of the array; null if the array is empty."]}, {"name": "arraySlice", "group": "Array", "doc": ["Copy a portion of an array"], "args": [{"name": "array", "doc": ["The array"]}, {"name": "start", "doc": ["Optional (default is 0). The start index of the slice."]}, {"name": "end", "doc": ["Optional (default is the end of the array). The end index of the slice."]}], "return": ["The new array slice"]}, {"name": "arraySort", "group": "Array", "doc": ["Sort an array"], "args": [{"name": "array", "doc": ["The array"]}, {"name": "compareFn", "doc": ["Optional (default is null). The comparison function."]}], "return": ["The sorted array"]}, {"name": "dataAggregate", "group": "Data", "doc": ["Aggregate a data array"], "args": [{"name": "data", "doc": ["The data array"]}, {"name": "aggregation", "doc": ["The [aggregation model](https://craigahobbs.github.io/bare-script-py/library/model.html#var.vName='Aggregation')"]}], "return": ["The aggregated data array"]}, {"name": "dataCalculatedField", "group": "Data", "doc": ["Add a calculated field to a data array"], "args": [{"name": "data", "doc": ["The data array"]}, {"name": "fieldName", "doc": ["The calculated field name"]}, {"name": "expr", "doc": ["The calculated field expression"]}, {"name": "variables", "doc": ["Optional (default is null). A variables object the expression evaluation."]}], "return": ["The updated data array"]}, {"name": "dataFilter", "group": "Data", "doc": ["Filter a data array"], "args": [{"name": "data", "doc": ["The data array"]}, {"name": "expr", "doc": ["The filter expression"]}, {"name": "variables", "doc": ["Optional (default is null). A variables object the expression evaluation."]}], "return": ["The filtered data array"]}, {"name": "dataJoin", "group": "Data", "doc": ["Join two data arrays"], "args": [{"name": "leftData", "doc": ["The left data array"]}, {"name": "rightData", "doc": ["The right data array"]}, {"name": "joinExpr", "doc": ["The [join expression](https://craigahobbs.github.io/bare-script/language/#expressions)"]}, {"name": "rightExpr", "doc": ["Optional (default is null).", "The right [join expression](https://craigahobbs.github.io/bare-script/language/#expressions)"]}, {"name": "isLeftJoin", "doc": ["Optional (default is false). If true, perform a left join (always include left row)."]}, {"name": "variables", "doc": ["Optional (default is null). A variables object for join expression evaluation."]}], "return": ["The joined data array"]}, {"name": "dataParseCSV", "group": "Data", "doc": ["Parse CSV text to a data array"], "args": [{"name": "text...", "doc": ["The CSV text"]}], "return": ["The data array"]}, {"name": "dataSort", "group": "Data", "doc": ["Sort a data array"], "args": [{"name": "data", "doc": ["The data array"]}, {"name": "sorts", "doc": ["The sort field-name/descending-sort tuples"]}], "return": ["The sorted data array"]}, {"name": "dataTop", "group": "Data", "doc": ["Keep the top rows for each category"], "args": [{"name": "data", "doc": ["The data array"]}, {"name": "count", "doc": ["The number of rows to keep"]}, {"name": "categoryFields", "doc": ["Optional (default is null). The category fields."]}], "return": ["The top data array"]}, {"name": "dataValidate", "group": "Data", "doc": ["Validate a data array"], "args": [{"name": "data", "doc": ["The data array"]}], "return": ["The validated data array"]}, {"name": "datetimeDay", "group": "Datetime", "doc": ["Get the day of the month of a datetime"], "args": [{"name": "datetime", "doc": ["The datetime"]}], "return": ["The day of the month"]}, {"name": "datetimeHour", "group": "Datetime", "doc": ["Get the hour of a datetime"], "args": [{"name": "datetime", "doc": ["The datetime"]}], "return": ["The hour"]}, {"name": "datetimeISOFormat", "group": "Datetime", "doc": ["Format the datetime as an ISO date/time string"], "args": [{"name": "datetime", "doc": ["The datetime"]}, {"name": "isDate", "doc": ["If true, format the datetime as an ISO date"]}], "return": ["The formatted datetime string"]}, {"name": "datetimeISOParse", "group": "Datetime", "doc": ["Parse an ISO date/time string"], "args": [{"name": "str", "doc": ["The ISO date/time string"]}], "return": ["The datetime, or null if parsing fails"]}, {"name": "datetimeMillisecond", "group": "Datetime", "doc": ["Get the millisecond of a datetime"], "args": [{"name": "datetime", "doc": ["The datetime"]}], "return": ["The millisecond"]}, {"name": "datetimeMinute", "group": "Datetime", "doc": ["Get the minute of a datetime"], "args": [{"name": "datetime", "doc": ["The datetime"]}], "return": ["The minute"]}, {"name": "datetimeMonth", "group": "Datetime", "doc": ["Get the month (1-12) of a datetime"], "args": [{"name": "datetime", "doc": ["The datetime"]}], "return": ["The month"]}, {"name": "datetimeNew", "group": "Datetime", "doc": ["Create a new datetime"], "args": [{"name": "year", "doc": ["The full year"]}, {"name": "month", "doc": ["The month (1-12)"]}, {"name": "day", "doc": ["The day of the month"]}, {"name": "hour", "doc": ["Optional (default is 0). The hour (0-23)."]}, {"name": "minute", "doc": ["Optional (default is 0). The minute."]}, {"name": "second", "doc": ["Optional (default is 0). The second."]}, {"name": "millisecond", "doc": ["Optional (default is 0). The millisecond."]}], "return": ["The new datetime"]}, {"name": "datetimeNewUTC", "group": "Datetime", "doc": ["Create a new UTC datetime"], "args": [{"name": "year", "doc": ["The full year"]}, {"name": "month", "doc": ["The month (1-12)"]}, {"name": "day", "doc": ["The day of the month"]}, {"name": "hour", "doc": ["Optional (default is 0). The hour (0-23)."]}, {"name": "minute", "doc": ["Optional (default is 0). The minute."]}, {"name": "second", "doc": ["Optional (default is 0). The second."]}, {"name": "millisecond", "doc": ["Optional (default is 0). The millisecond."]}], "return": ["The new UTC datetime"]}, {"name": "datetimeNow", "group": "Datetime", "doc": ["Get the current datetime"], "return": ["The current datetime"]}, {"name": "datetimeSecond", "group": "Datetime", "doc": ["Get the second of a datetime"], "args": [{"name": "datetime", "doc": ["The datetime"]}], "return": ["The second"]}, {"name": "datetimeToday", "group": "Datetime", "doc": ["Get today's datetime"], "return": ["Today's datetime"]}, {"name": "datetimeYear", "group": "Datetime", "doc": ["Get the full year of a datetime"], "args": [{"name": "datetime", "doc": ["The datetime"]}], "return": ["The full year"]}, {"name": "jsonParse", "group": "JSON", "doc": ["Convert a JSON string to an object"], "args": [{"name": "string", "doc": ["The JSON string"]}], "return": ["The object"]}, {"name": "jsonStringify", "group": "JSON", "doc": ["Convert an object to a JSON string"], "args": [{"name": "value", "doc": ["The object"]}, {"name": "indent", "doc": ["Optional (default is null). The indentation number."]}], "return": ["The JSON string"]}, {"name": "mathAbs", "group": "Math", "doc": ["Compute the absolute value of a number"], "args": [{"name": "x", "doc": ["The number"]}], "return": ["The absolute value of the number"]}, {"name": "mathAcos", "group": "Math", "doc": ["Compute the arccosine, in radians, of a number"], "args": [{"name": "x", "doc": ["The number"]}], "return": ["The arccosine, in radians, of the number"]}, {"name": "mathAsin", "group": "Math", "doc": ["Compute the arcsine, in radians, of a number"], "args": [{"name": "x", "doc": ["The number"]}], "return": ["The arcsine, in radians, of the number"]}, {"name": "mathAtan", "group": "Math", "doc": ["Compute the arctangent, in radians, of a number"], "args": [{"name": "x", "doc": ["The number"]}], "return": ["The arctangent, in radians, of the number"]}, {"name": "mathAtan2", "group": "Math", "doc": ["Compute the angle, in radians, between (0, 0) and a point"], "args": [{"name": "y", "doc": ["The Y-coordinate of the point"]}, {"name": "x", "doc": ["The X-coordinate of the point"]}], "return": ["The angle, in radians"]}, {"name": "mathCeil", "group": "Math", "doc": ["Compute the ceiling of a number (round up to the next highest integer)"], "args": [{"name": "x", "doc": ["The number"]}], "return": ["The ceiling of the number"]}, {"name": "mathCos", "group": "Math", "doc": ["Compute the cosine of an angle, in radians"], "args": [{"name": "x", "doc": ["The angle, in radians"]}], "return": ["The cosine of the angle"]}, {"name": "mathFloor", "group": "Math", "doc": ["Compute the floor of a number (round down to the next lowest integer)"], "args": [{"name": "x", "doc": ["The number"]}], "return": ["The floor of the number"]}, {"name": "mathLn", "group": "Math", "doc": ["Compute the natural logarithm (base e) of a number"], "args": [{"name": "x", "doc": ["The number"]}], "return": ["The natural logarithm of the number"]}, {"name": "mathLog", "group": "Math", "doc": ["Compute the logarithm (base 10) of a number"], "args": [{"name": "x", "doc": ["The number"]}, {"name": "base", "doc": ["Optional (default is 10). The logarithm base."]}], "return": ["The logarithm of the number"]}, {"name": "mathMax", "group": "Math", "doc": ["Compute the maximum value"], "args": [{"name": "values...", "doc": ["The values"]}], "return": ["The maximum value"]}, {"name": "mathMin", "group": "Math", "doc": ["Compute the minimum value"], "args": [{"name": "values...", "doc": ["The values"]}], "return": ["The minimum value"]}, {"name": "mathPi", "group": "Math", "doc": ["Return the number pi"], "return": ["The number pi"]}, {"name": "mathRandom", "group": "Math", "doc": ["Compute a random number between 0 and 1, inclusive"], "return": ["A random number"]}, {"name": "mathRound", "group": "Math", "doc": ["Round a number to a certain number of decimal places"], "args": [{"name": "x", "doc": ["The number"]}, {"name": "digits", "doc": ["Optional (default is 0). The number of decimal digits to round to."]}], "return": ["The rounded number"]}, {"name": "mathSign", "group": "Math", "doc": ["Compute the sign of a number"], "args": [{"name": "x", "doc": ["The number"]}], "return": ["-1 for a negative number, 1 for a positive number, and 0 for zero"]}, {"name": "mathSin", "group": "Math", "doc": ["Compute the sine of an angle, in radians"], "args": [{"name": "x", "doc": ["The angle, in radians"]}], "return": ["The sine of the angle"]}, {"name": "mathSqrt", "group": "Math", "doc": ["Compute the square root of a number"], "args": [{"name": "x", "doc": ["The number"]}], "return": ["The square root of the number"]}, {"name": "mathTan", "group": "Math", "doc": ["Compute the tangent of an angle, in radians"], "args": [{"name": "x", "doc": ["The angle, in radians"]}], "return": ["The tangent of the angle"]}, {"name": "numberParseFloat", "group": "Number", "doc": ["Parse a string as a floating point number"], "args": [{"name": "string", "doc": ["The string"]}], "return": ["The number"]}, {"name": "numberParseInt", "group": "Number", "doc": ["Parse a string as an integer"], "args": [{"name": "string", "doc": ["The string"]}, {"name": "radix", "doc": ["Optional (default is 10). The number base."]}], "return": ["The integer"]}, {"name": "numberToFixed", "group": "Number", "doc": ["Format a number using fixed-point notation"], "args": [{"name": "x", "doc": ["The number"]}, {"name": "digits", "doc": ["Optional (default is 2). The number of digits to appear after the decimal point."]}, {"name": "trim", "doc": ["Optional (default is false). If true, trim trailing zeroes and decimal point."]}], "return": ["The fixed-point notation string"]}, {"name": "objectAssign", "group": "Object", "doc": ["Assign the keys/values of one object to another"], "args": [{"name": "object", "doc": ["The object to assign to"]}, {"name": "object2", "doc": ["The object to assign"]}], "return": ["The updated object"]}, {"name": "objectCopy", "group": "Object", "doc": ["Create a copy of an object"], "args": [{"name": "object", "doc": ["The object to copy"]}], "return": ["The object copy"]}, {"name": "objectDelete", "group": "Object", "doc": ["Delete an object key"], "args": [{"name": "object", "doc": ["The object"]}, {"name": "key", "doc": ["The key to delete"]}]}, {"name": "objectGet", "group": "Object", "doc": ["Get an object key's value"], "args": [{"name": "object", "doc": ["The object"]}, {"name": "key", "doc": ["The key"]}, {"name": "defaultValue", "doc": ["The default value (optional)"]}], "return": ["The value or null if the key does not exist"]}, {"name": "objectHas", "group": "Object", "doc": ["Test if an object contains a key"], "args": [{"name": "object", "doc": ["The object"]}, {"name": "key", "doc": ["The key"]}], "return": ["true if the object contains the key, false otherwise"]}, {"name": "objectKeys", "group": "Object", "doc": ["Get an object's keys"], "args": [{"name": "object", "doc": ["The object"]}], "return": ["The array of keys"]}, {"name": "objectNew", "group": "Object", "doc": ["Create a new object"], "args": [{"name": "keyValues...", "doc": ["The object's initial key and value pairs"]}], "return": ["The new object"]}, {"name": "objectSet", "group": "Object", "doc": ["Set an object key's value"], "args": [{"name": "object", "doc": ["The object"]}, {"name": "key", "doc": ["The key"]}, {"name": "value", "doc": ["The value to set"]}], "return": ["The value to set"]}, {"name": "regexEscape", "group": "Regex", "doc": ["Escape a string for use in a regular expression"], "args": [{"name": "string", "doc": ["The string to escape"]}], "return": ["The escaped string"]}, {"name": "regexMatch", "group": "Regex", "doc": ["Find the first match of a regular expression in a string"], "args": [{"name": "regex", "doc": ["The regular expression"]}, {"name": "string", "doc": ["The string"]}], "return": ["The [match object](model.html#var.vName='RegexMatch'), or null if no matches are found"]}, {"name": "regexMatchAll", "group": "Regex", "doc": ["Find all matches of regular expression in a string"], "args": [{"name": "regex", "doc": ["The regular expression"]}, {"name": "string", "doc": ["The string"]}], "return": ["The array of [match objects](model.html#var.vName='RegexMatch')"]}, {"name": "regexNew", "group": "Regex", "doc": ["Create a regular expression"], "args": [{"name": "pattern", "doc": ["The regular expression pattern string"]}, {"name": "flags", "doc": ["The [regular expression flags (\"i\", \"m\", \"s\", \"u\")"]}], "return": ["The regular expression or null if the pattern is invalid"]}, {"name": "regexReplace", "group": "Regex", "doc": ["Replace regular expression matches with a string"], "args": [{"name": "regex", "doc": ["The replacement regular expression"]}, {"name": "string", "doc": ["The string"]}, {"name": "substr", "doc": ["The replacement string"]}], "return": ["The updated string"]}, {"name": "regexSplit", "group": "Regex", "doc": ["Split a string with a regular expression"], "args": [{"name": "regex", "doc": ["The regular expression"]}, {"name": "string", "doc": ["The string"]}], "return": ["The array of split parts"]}, {"name": "schemaParse", "group": "Schema", "doc": ["Parse the [Schema Markdown](https://craigahobbs.github.io/schema-markdown-js/language/) text"], "args": [{"name": "lines...", "doc": ["The [Schema Markdown](https://craigahobbs.github.io/schema-markdown-js/language/)", "text lines (may contain nested arrays of un-split lines)"]}], "return": ["The schema's [type model](https://craigahobbs.github.io/schema-markdown-doc/doc/#var.vName='Types')"]}, {"name": "schemaParseEx", "group": "Schema", "doc": ["Parse the [Schema Markdown](https://craigahobbs.github.io/schema-markdown-js/language/) text with options"], "args": [{"name": "lines", "doc": ["The array of [Schema Markdown](https://craigahobbs.github.io/schema-markdown-js/language/)", "text lines (may contain nested arrays of un-split lines)"]}, {"name": "types", "doc": ["Optional. The [type model](https://craigahobbs.github.io/schema-markdown-doc/doc/#var.vName='Types')."]}, {"name": "filename", "doc": ["Optional (default is \"\"). The file name."]}], "return": ["The schema's [type model](https://craigahobbs.github.io/schema-markdown-doc/doc/#var.vName='Types')"]}, {"name": "schemaTypeModel", "group": "Schema", "doc": ["Get the [Schema Markdown Type Model](https://craigahobbs.github.io/schema-markdown-doc/doc/#var.vName='Types')"], "return": ["The [Schema Markdown Type Model](https://craigahobbs.github.io/schema-markdown-doc/doc/#var.vName='Types')"]}, {"name": "schemaValidate", "group": "Schema", "doc": ["Validate an object to a schema type"], "args": [{"name": "types", "doc": ["The [type model](https://craigahobbs.github.io/schema-markdown-doc/doc/#var.vName='Types')"]}, {"name": "typeName", "doc": ["The type name"]}, {"name": "value", "doc": ["The object to validate"]}], "return": ["The validated object or null if validation fails"]}, {"name": "schemaValidateTypeModel", "group": "Schema", "doc": ["Validate a [Schema Markdown Type Model](https://craigahobbs.github.io/schema-markdown-doc/doc/#var.vName='Types')"], "args": [{"name": "types", "doc": ["The [type model](https://craigahobbs.github.io/schema-markdown-doc/doc/#var.vName='Types') to validate"]}], "return": ["The validated [type model](https://craigahobbs.github.io/schema-markdown-doc/doc/#var.vName='Types')"]}, {"name": "stringCharCodeAt", "group": "String", "doc": ["Get a string index's character code"], "args": [{"name": "string", "doc": ["The string"]}, {"name": "index", "doc": ["The character index"]}], "return": ["The character code"]}, {"name": "stringEndsWith", "group": "String", "doc": ["Determine if a string ends with a search string"], "args": [{"name": "string", "doc": ["The string"]}, {"name": "search", "doc": ["The search string"]}], "return": ["true if the string ends with the search string, false otherwise"]}, {"name": "stringFromCharCode", "group": "String", "doc": ["Create a string of characters from character codes"], "args": [{"name": "charCodes...", "doc": ["The character codes"]}], "return": ["The string of characters"]}, {"name": "stringIndexOf", "group": "String", "doc": ["Find the first index of a search string in a string"], "args": [{"name": "string", "doc": ["The string"]}, {"name": "search", "doc": ["The search string"]}, {"name": "index", "doc": ["Optional (default is 0). The index at which to start the search."]}], "return": ["The first index of the search string; -1 if not found."]}, {"name": "stringLastIndexOf", "group": "String", "doc": ["Find the last index of a search string in a string"], "args": [{"name": "string", "doc": ["The string"]}, {"name": "search", "doc": ["The search string"]}, {"name": "index", "doc": ["Optional (default is the end of the string). The index at which to start the search."]}], "return": ["The last index of the search string; -1 if not found."]}, {"name": "stringLength", "group": "String", "doc": ["Get the length of a string"], "args": [{"name": "string", "doc": ["The string"]}], "return": ["The string's length; zero if not a string"]}, {"name": "stringLower", "group": "String", "doc": ["Convert a string to lower-case"], "args": [{"name": "string", "doc": ["The string"]}], "return": ["The lower-case string"]}, {"name": "stringNew", "group": "String", "doc": ["Create a new string from a value"], "args": [{"name": "value", "doc": ["The value"]}], "return": ["The new string"]}, {"name": "stringRepeat", "group": "String", "doc": ["Repeat a string"], "args": [{"name": "string", "doc": ["The string to repeat"]}, {"name": "count", "doc": ["The number of times to repeat the string"]}], "return": ["The repeated string"]}, {"name": "stringReplace", "group": "String", "doc": ["Replace all instances of a string with another string"], "args": [{"name": "string", "doc": ["The string to update"]}, {"name": "substr", "doc": ["The string to replace"]}, {"name": "newSubstr", "doc": ["The replacement string"]}], "return": ["The updated string"]}, {"name": "stringSlice", "group": "String", "doc": ["Copy a portion of a string"], "args": [{"name": "string", "doc": ["The string"]}, {"name": "start", "doc": ["The start index of the slice"]}, {"name": "end", "doc": ["Optional (default is the end of the string). The end index of the slice."]}], "return": ["The new string slice"]}, {"name": "stringSplit", "group": "String", "doc": ["Split a string"], "args": [{"name": "string", "doc": ["The string to split"]}, {"name": "separator", "doc": ["The separator string"]}], "return": ["The array of split-out strings"]}, {"name": "stringStartsWith", "group": "String", "doc": ["Determine if a string starts with a search string"], "args": [{"name": "string", "doc": ["The string"]}, {"name": "search", "doc": ["The search string"]}], "return": ["true if the string starts with the search string, false otherwise"]}, {"name": "stringTrim", "group": "String", "doc": ["Trim the whitespace from the beginning and end of a string"], "args": [{"name": "string", "doc": ["The string"]}], "return": ["The trimmed string"]}, {"name": "stringUpper", "group": "String", "doc": ["Convert a string to upper-case"], "args": [{"name": "string", "doc": ["The string"]}], "return": ["The upper-case string"]}, {"name": "systemBoolean", "group": "System", "doc": ["Interpret a value as a boolean"], "args": [{"name": "value", "doc": ["The value"]}], "return": ["true or false"]}, {"name": "systemCompare", "group": "System", "doc": ["Compare two values"], "args": [{"name": "left", "doc": ["The left value"]}, {"name": "right", "doc": ["The right value"]}], "return": ["-1 if the left value is less than the right value, 0 if equal, and 1 if greater than"]}, {"name": "systemFetch", "group": "System", "doc": ["Retrieve a URL resource"], "args": [{"name": "url", "doc": ["The resource URL, [request model](model.html#var.vName='SystemFetchRequest'), or array of URL and", "[request model](model.html#var.vName='SystemFetchRequest')"]}], "return": ["The response string or array of strings; null if an error occurred"]}, {"name": "systemGlobalGet", "group": "System", "doc": ["Get a global variable value"], "args": [{"name": "name", "doc": ["The global variable name"]}, {"name": "defaultValue", "doc": ["The default value (optional)"]}], "return": ["The global variable's value or null if it does not exist"]}, {"name": "systemGlobalSet", "group": "System", "doc": ["Set a global variable value"], "args": [{"name": "name", "doc": ["The global variable name"]}, {"name": "value", "doc": ["The global variable's value"]}], "return": ["The global variable's value"]}, {"name": "systemIs", "group": "System", "doc": ["Test if one value is the same object as another"], "args": [{"name": "value1", "doc": ["The first value"]}, {"name": "value2", "doc": ["The second value"]}], "return": ["true if values are the same object, false otherwise"]}, {"name": "systemLog", "group": "System", "doc": ["Log a message to the console"], "args": [{"name": "string", "doc": ["The message"]}]}, {"name": "systemLogDebug", "group": "System", "doc": ["Log a message to the console, if in debug mode"], "args": [{"name": "string", "doc": ["The message"]}]}, {"name": "systemPartial", "group": "System", "doc": ["If additional arguments are passed to the returned function, they are appended to \"args\"."], "args": [{"name": "func", "doc": ["The function"]}, {"name": "args...", "doc": ["The function arguments"]}], "return": ["The new function called with \"args\""]}, {"name": "systemType", "group": "System", "doc": ["Get a value's type string"], "args": [{"name": "value", "doc": ["The value"]}], "return": ["Valid values are: 'array', 'boolean', 'datetime', 'function', 'null', 'number', 'object', 'regex', 'string'."]}, {"name": "urlEncode", "group": "URL", "doc": ["Encode a URL"], "args": [{"name": "url", "doc": ["The URL string"]}, {"name": "extra", "doc": ["Optional (default is true). If true, encode extra characters for wider compatibility."]}], "return": ["The encoded URL string"]}, {"name": "urlEncodeComponent", "group": "URL", "doc": ["Encode a URL component"], "args": [{"name": "url", "doc": ["The URL component string"]}, {"name": "extra", "doc": ["Optional (default is true). If true, encode extra characters for wider compatibility."]}], "return": ["The encoded URL component string"]}]}
